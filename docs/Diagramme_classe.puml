@startuml

title Zeldiablo

class ScreenAdapter
class Game

class DesktopLauncher {
    - {static} void main(String[] arg)
}

class Zeldiablo {
    + void create()
}

package views {
    class GameScreen {
        - SpriteBatch sprite
        - Box2DDebugRenderer debug
        - OrthographicCamera camera
        - Viewport view
        + void render(float delta)
        - void update()
        + void dispose()
    }
}

package models {
    class GameWorld {
        - World world
        - static int widthWorld = 80
        - static int heightWorld = 80

        + void changeMaze(Portal p)
        + int getWidthWorld()
        + int getHeightWorld()
    }

    class GameState {
        + boolean isLost()
        + boolean isWinned()
        + boolean isPaused()
        + boolean isInProgress()
    }

    enum Etat {
        IN_PROGRESS
        WINNED
        LOST
        PAUSED
        STOPPED
    }

    interface Entity {
        + int getHP()
        + String getName()
        + void draw(SpriteBatch batch)
    }

    class Player {
        - int hp
        - int att
        - int def
        - Body body
        - GameWorld gs

        + int getHP()
        + void attack()
        + void draw(SpriteBatch batch)
    }

    class Weapon {
        - int damage
        - int scope
        - int speed
        - String name
        - Body bodyWeapon

        + void draw(SpriteBatch batch)
    }

    class Maze {
        - int currentNumMaze

        + void loadMaze(ArrayList<Portail> portals)
        + int getCurrentNumMaze()
        + void draw(SpriteBatch batch)
    }

    class Portal {
        - Vector2 posPortal
        - Body bodyPortal
        - int numMaze
        - boolean actif

        + void draw(SpriteBatch batch)
        + int getNumMaze()
        + Vector2 getPosPortal()
        + Vector2 getPosPortalExit()
        + void setActif(boolean actif)
        + void setExitPortalActif(boolean actif)
        + void set ExitPortal(Portal exitPortal)
        + int getExitPortalNumMaze()
        + boolean exitSameMaze()
        + boolean isActif()
    }
}

package factories {

    enum TextureFactory {
        + getPause()
    }

}

package controllers {
    class MouseListener {
        + mouseMoved(int screenX, int screenY)
        + public float getX()
        + public float getY()
    }

    class ControllerAdapter {
        + public boolean keyDown(int keycode)
        + public boolean keyUp(int keycode)
        + public boolean keyTyped(char character)
        + public boolean touchDown(int screenX, int screenY, int pointer, int button)
        + public boolean touchUp(int screenX, int screenY, int pointer, int button)
        + public boolean touchDragged(int screenX, int screenY, int pointer)
        + public boolean mouseMoved(int screenX, int screenY)
        + public boolean scrolled(int amount)
    }

    interface InputProcessor

    class KeyboardListener {
        + String getCMD()
        + boolean keyDown(int keycode)
        + boolean keyUp(int keycode)
        + boolean keyTyped(char character)
        + boolean touchDown(int screenX, int screenY, int pointer, int button)
        + boolean touchUp(int screenX, int screenY, int pointer, int button)
        + boolean touchDragged(int screenX, int screenY, int pointer)
        + boolean mouseMoved(int screenX, int screenY)
        + boolean scrolled(int amount)
    }

    enum Action {
        LEFT_CLICK
    }
}

DesktopLauncher *.. Zeldiablo

Zeldiablo --|> Game
GameScreen --|> ScreenAdapter

Zeldiablo *.. GameScreen


GameState --> "1" Etat: "- etat"

Player ..|> Entity
Player --> "1" Weapon: "- weapon"

Portal --> "1" Portal

GameScreen --> "1" GameWorld: "- game"
GameScreen --> "1" GameState: "- state"

GameWorld --> "1" GameScreen: "- screen"
GameWorld --> "1" Player: "- player"
GameWorld --> "1" Maze
GameWorld --> "*" Portal

KeyboardListener --> "1" Action: "- action"
KeyboardListener --|> ControllerAdapter
ControllerAdapter ..|> InputProcessor
GameScreen --> "1" KeyboardListener: "- keyboard"
GameScreen --> "1" MouseListener: "- mouse"

@enduml
